trigger:
- master
- feature/*
- release/*

pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  GitVersion.SemVer: ''
  isMaster: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/master')]
  isRelease: $[startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')]

stages:
- stage: Build
  jobs:
    - job: BuildJob
      steps:
      - task: gitversion/setup@0
        displayName: Setup GitVersion (5.x)
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Run GitVersion

      - task: DotNetCoreCLI@2
        displayName: Restore NuGet Packages
        inputs:
          command: 'restore'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: Build the Library
        inputs:
          command: 'build'
          arguments: '-p:Version=$(GitVersion.SemVer) -c Release'

      - task: DotNetCoreCLI@2
        displayName: Package the Library and source
        inputs:
          command: 'pack'
          packagesToPack: '**/*.csproj'
          includesymbols: true
          includesource: true
          versioningScheme: 'byEnvVar'
          versionEnvVar: 'GitVersion.NuGetVersion'
          nobuild: true

      - task: DotNetCoreCLI@2
        displayName: Run the tests
        inputs:
          command: 'test'
          nobuild: true
          arguments: '-c Release'

      - task: PublishPipelineArtifact@1
        displayName: Publish the staged packages
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'drop'
          publishLocation: 'pipeline'

- stage: Publish
  jobs:
  - deployment: NuGet
    displayName: NuGet
    environment: NuGet
    condition: and(succeeded(), or(variables['isRelease'], variables['isMaster']))
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'drop'
          - task: DotNetCoreCLI@2
            displayName: 'dotnet push (nuget.org)'
            inputs:
              command: 'push'
              packagesToPush: '$(Agent.BuildDirectory)/drop/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'Nuget zxcvbn-core'
          - task: GitHubRelease@1
            displayName: 'GitHub release (create)'
            inputs:
              gitHubConnection: 'github connection 1'
              repositoryName: 'trichards57/zxcvbn-cs'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'gitTag'
              tagPattern: '*'
              releaseNotesSource: 'inline'
              isDraft: true
              isPreRelease: true
              addChangeLog: false
            condition: succeededOrFailed()
          - task: DotNetCoreCLI@2
            displayName: 'dotnet push (GitHub)'
            inputs:
              command: push
              packagesToPush: '$(Agent.BuildDirectory)/drop/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'Github Nuget Packages'
            condition: succeededOrFailed()
